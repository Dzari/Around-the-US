!function(){"use strict";class e{constructor(e,t,s,a,i){this.data=e,this._cardSelector=t,this._handleImageClick=s,this._handleConfirmDelete=a,this._handleLike=i,this._isLiked=e.isLiked}_setEventListeners(){this._likeButton=this._cardElement.querySelector("#card-like"),this._deletebutton=this._cardElement.querySelector("#card-delete"),this._likeButton.addEventListener("click",(()=>{this._handleCardLike()})),this._deletebutton.addEventListener("click",(()=>{this._handleConfirmDelete(this.data)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this.data)}))}getCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.cloneNode(!0),this._likeCounter=this._cardElement.querySelector("#card-like-counter"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._card=this._cardElement.querySelector(".card"),this._cardTitle.textContent=this.data.name,this._card.id=this.data._id,this._cardImage.alt=this.data.name,this._cardImage.src=this.data.link,this._setEventListeners(),this._cardElement}_handleCardLike(){"1"===this._likeCounter.textContent?this._handleLike(this,"DELETE"):this._handleLike(this,"PUT")}renderLikes(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._isLiked;this._isLiked=e,this._isLiked?(this._likeCounter.textContent="1",this._likeButton.classList.add("card__like_liked")):(this._likeCounter.textContent="0",this._likeButton.classList.remove("card__like_liked"))}}class t{constructor(e,t){this._config=e,this._form=t}_checkValidity(e){if(e.validity.valid){const{inputErrorClass:t}=this._config,{errorClass:s}=this._config,a=this._form.querySelector(`#${e.id}-error`);e.classList.remove(t),a.textContent="",a.classList.remove(s)}else{const{inputErrorClass:t}=this._config,{errorClass:s}=this._config,a=this._form.querySelector(`#${e.id}-error`);e.classList.add(t),a.textContent=e.validationMessage,a.classList.add(s)}}enableValidation(){const{inputSelector:e,submitButtonSelector:t}=this._config;this._inputList=[...this._form.querySelectorAll(e)],this._buttonElement=this._form.querySelector(t),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e),this.toggleButtonState()}))}))}toggleButtonState(){const{inactiveButtonClass:e}=this._config;(()=>this._inputList.some((e=>!e.validity.valid)))()?(this._buttonElement.classList.add(e),this._buttonElement.setAttribute("disabled","")):(this._buttonElement.classList.remove(e),this._buttonElement.removeAttribute("disabled",""))}}class s{constructor(e,t,s){this._data=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._data.forEach((e=>{this._renderer(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";this._container[t](e)}}class a{constructor(e){this._popupSelector=e,this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_is-opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_is-opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()}))}}class i extends a{constructor(e,t){super(e),this.popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._formInputList=[...this.popupForm.querySelectorAll(".modal__form-input")]}setEventListeners(){super.setEventListeners(),this.popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}_getInputValues(){const e={};return this._formInputList.forEach((t=>{const{name:s,value:a}=t;e[s]=a})),e}}const n={formSelector:"-modal-form",inputSelector:".modal__form-input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__form-input_error",errorClass:"modal__error-message_active"},r=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}async validateAndParse(e){return e.ok?await e.json():Promise.reject()}async getInitialCards(){const e=await fetch(`${this._baseUrl}/cards`,{headers:this._headers});return await this.validateAndParse(e)}async getUserInfo(){const e=await fetch(`${this._baseUrl}/users/me`,{headers:this._headers});return await this.validateAndParse(e)}async patchProfileInfo(e,t){const s=await fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})});return await this.validateAndParse(s)}async addNewCard(e){let{name:t,link:s}=e;const a=await fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})});return await this.validateAndParse(a)}async deleteCard(e){const t=await fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers});return await this.validateAndParse(t)}async likeCard(e){const t=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers});return await this.validateAndParse(t)}async removeLike(e){const t=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers});return await this.validateAndParse(t)}async changeProfilePicture(e){const t=await fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})});return await this.validateAndParse(t)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6730a6b1-094e-484e-b754-6ed1376cdeb2","Content-Type":"application/json"}}),o=new class extends a{constructor(e){super(e),this._maxImage=this._popupElement.querySelector("#max-image"),this._maxImageTitle=this._popupElement.querySelector("#max-image-title")}open(e){this._maxImage.src=e.link,this._maxImage.alt=e.name,this._maxImageTitle.textContent=e.name,super.open()}}("#max-image-modal"),l=new i("#edit-profile-modal",(function(e){const t=k.querySelector("#edit-profile-modal-submit-button");t.textContent="Saving...",r.patchProfileInfo(e.name,e.job).then((e=>{u.setUserInfo(e),l.popupForm.reset(),m.toggleButtonState(),l.close()})).catch((e=>{console.log(e)})).finally((()=>{t.textContent="Save"}))})),c=new i("#add-card-modal",(function(e){const t=y.querySelector("#add-card-modal-submit-button");t.textContent="Saving...",r.addNewCard(e).then((e=>{w(e,"prepend"),c.popupForm.reset(),_.toggleButtonState(),c.close()})).catch((e=>{console.log(e)})).finally((()=>{t.textContent="Create"}))})),d=new i("#edit-pic-modal",(function(e){let{link:t}=e;const s=b.querySelector("#edit-pic-modal-submit-button");s.textContent="Saving...",r.changeProfilePicture(t).then((e=>{u.setUserInfo(e),d.close()})).catch((e=>{console.log(e)})).finally((()=>{s.textContent="Save"}))})),h=new i("#confirm-modal",(function(){r.deleteCard(x._id).then((()=>{document.querySelector(`li[id='${x._id}'`).remove()})).catch((e=>{console.log(e)})).finally((()=>{h.close()}))})),u=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:a}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(a)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:a}=e;this._nameElement.textContent=t,this._jobElement.textContent=s,this._avatarElement.src=a}}({nameSelector:"#profile-name",jobSelector:"#profile-subtitle",avatarSelector:"#profile-photo"}),m=new t(n,l.popupForm),_=new t(n,c.popupForm),p=new t(n,d.popupForm),f=document.querySelector("#edit-profile-modal-open-button"),E=document.querySelector("#add-card-modal-open-button"),v=document.querySelector("#profile-photo"),g=document.querySelector("#edit-profile-name-placeholder"),S=document.querySelector("#edit-profile-subtitle-placeholder"),b=document.querySelector("#edit-pic-modal"),y=document.querySelector("#add-card-modal"),k=document.querySelector("#edit-profile-modal"),C=[o,l,c,d,h],L=[m,_,p];let q;function w(t){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";const a=new e(t,"#card-template",I,P,U),i=a.getCardElement();a.renderLikes(),q.addItem(i,s)}f.addEventListener("click",(()=>{const e=u.getUserInfo();g.value=e.name,S.value=e.about,m.toggleButtonState(),l.open()})),E.addEventListener("click",(()=>{c.open()})),v.addEventListener("click",(()=>{d.open()}));const I=e=>{o.open(e)};let x;function P(e){h.open(),x=e}function U(e,t){"PUT"===t?r.likeCard(e.data._id).then((()=>{e.renderLikes(!0)})).catch((e=>{console.log(e)})):r.removeLike(e.data._id).then((()=>{e.renderLikes(!1)})).catch((e=>{console.log(e)}))}r.getUserInfo().then((e=>{u.setUserInfo(e)})).catch((e=>{console.log(e)})),r.getInitialCards().then((e=>{q=new s(e,w,"#cards-list"),q.renderItems()})).catch((e=>{console.log(e)})),function(e){e.forEach((e=>{e.setEventListeners()}))}(C),function(e){e.forEach((e=>{e.enableValidation(),e.toggleButtonState()}))}(L)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,